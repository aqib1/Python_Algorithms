# -*- coding: utf-8 -*-
"""logistic_regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A3skpIxX8JRB2XOrB36_F8PgAdS4D4iD
"""

import pandas as pd
import plotly.express as px
from statsmodels.stats.outliers_influence import variance_inflation_factor as vif
from statsmodels.formula.api import logit
from sklearn.preprocessing import quantile_transform
import numpy as np
import seaborn as sns
import ipywidgets as widgets
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import matplotlib.pyplot as plt
import random

df = pd.read_csv("sample_data/Churn Modelling.csv", index_col=["RowNumber", "CustomerId", "Surname"])
df.head()

categorical_columns = ["Geography", "Gender", "Tenure", "NumOfProducts", "HasCrCard"]
non_categorical_columns = ["CreditScore", "Age", "Balance", "EstimatedSalary"]

w = widgets.Dropdown(
    options=non_categorical_columns,
    value="CreditScore",
    description="Task:"
)

display(w)

non_categorical_col_value = w.value
layout = go.Layout(plot_bgcolor='#F0E9E6')
fig = go.Figure(layout=layout)

fig.add_trace(
    go.Box(
        y=df.loc[df["Exited"]==1, non_categorical_col_value], marker_color='indianred', name="Churn"
      )
)

fig.add_trace(
    go.Box(
        y=df.loc[df["Exited"]==0, non_categorical_col_value], marker_color='lightseagreen', name="Churn"
    )
)

fig.update_layout(
                   title='Continious Regressor to Target',
                   xaxis_title=f"{non_categorical_col_value}",
                   yaxis_title='IQR',
                   xaxis_showgrid=False,
                   yaxis_showgrid=False
)

fig.show()

categorical_cols = ["Geography", "Gender",  "HasCrCard"]
non_categorical_cols = ["Age"]


formula = "Exited"+"~"+"+".join(non_categorical_cols)+"+"+\
          "+".join([f"C({each_categorcial_col})" for each_categorcial_col\
                    in categorical_cols]) + "-" + "1"
formula

logitfit = logit(formula=str(formula), data=df).fit()

df["Proba"] = logitfit.predict(df)
df["log_odds"] = logitfit.predict(df, linear=True)
df["predicted"] = 0

# Sort for a clean curve
df_sorted = df.sort_values("log_odds")

plt.figure(figsize=(8, 5))
plt.plot(df_sorted["log_odds"], df_sorted["Proba"], color="teal")
plt.title("Sigmoid Curve: Log-odds â†’ Probability")
plt.xlabel("Log-odds (Linear Model Output)")
plt.ylabel("Predicted Probability")
plt.grid(True)
plt.show()

df.loc[df["Proba"]>0.3, "predicted"] = 1

w_cat = widgets.Dropdown(
    options=categorical_columns,
    value='Geography',
    description="Task:"
)
display(w_cat)

categorical_col_value = w_cat.value
ct = pd.crosstab(df[categorical_col_value], df["Exited"])
ct.columns = ["No Churn", "Churn"]
ct = ct.reset_index()
ct

fig_cat = go.Figure(layout=layout)
fig_cat.add_trace(go.Box(y=df.loc[df["Exited"]==1, categorical_col_value], marker_color='indianred', name="Churn"))
fig_cat.add_trace(go.Box(y=df.loc[df["Exited"]==0, categorical_col_value], marker_color='lightseagreen', name="Churn"))
fig_cat.update_layout(
                   title='Continious Regressor to Target',
                   xaxis_title=f"{categorical_col_value}",
                   yaxis_title='IQR',
                   xaxis_showgrid=False,
                   yaxis_showgrid=False
)

fig_cat.show()

logitfit_coeffs = logitfit.summary2().tables[1]
logitfit_coeffs = logitfit_coeffs.reindex(logitfit_coeffs["Coef."].abs().sort_values().index)
logitfit_coeffs.head(10)

fig = px.bar(ct, x=logitfit_coeffs['Coef.'],\
             y=logitfit_coeffs['Coef.'].index,
             orientation="h",
             color_discrete_sequence=['lightseagreen'] )

fig.update_layout(
                   plot_bgcolor='#F0E9E6',
                   title='Feature Importances',
                   xaxis_title='Coefficient Importance',
                   yaxis_title='Features',
                   xaxis_showgrid=False,
                   yaxis_showgrid=False
)

fig.show()

layout = go.Layout(plot_bgcolor='#F0E9E6')
fig = go.Figure(layout=layout)

fig.add_trace(
    go.Scatter(
    x=logitfit_coeffs['Coef.'],
    y=logitfit_coeffs['Coef.'].index,
    line=dict(color='#42C4F7', width=13),
    mode='markers',

    error_x=dict(
            type='data',
            symmetric=False,
            array=logitfit_coeffs['0.975]'] - logitfit_coeffs['Coef.'],
            arrayminus=logitfit_coeffs['Coef.'] - logitfit_coeffs['[0.025'],
            color='#8793c4')
        )
    )


fig.update_layout(
                   title='Regression Meta Analysis',
                   xaxis_title='Weight Estimates',
                   yaxis_title='Variable',
                   xaxis_showgrid=False,
                   yaxis_showgrid=False
)

fig.show()

dummy_encoded_df = pd.get_dummies(df[non_categorical_columns+categorical_columns], columns=["Geography"])
dummy_encoded_df = dummy_encoded_df[["HasCrCard", "Age", "Gender", "Geography_Germany", "Geography_Spain", "Geography_France"]]
dummy_encoded_df["Gender"] = dummy_encoded_df["Gender"].map({
    "Female":0, "Male":1
})

dummy_encoded_df["Geography_Germany"] = dummy_encoded_df["Geography_Germany"].map({
    False:0, True:1
})

dummy_encoded_df["Geography_Spain"] = dummy_encoded_df["Geography_Spain"].map({
    False:0, True:1
})

dummy_encoded_df["Geography_France"] = dummy_encoded_df["Geography_France"].map({
    False:0, True:1
})

dummy_encoded_df.head()

effects = dummy_encoded_df * logitfit_coeffs['Coef.'].to_numpy()
effects.head()

layout = go.Layout(plot_bgcolor='#F0E9E6')
fig = go.Figure(layout=layout)

for effect in effects.columns:
  fig.add_trace(
      go.Box(x=effects[effect], marker_color='lightseagreen', name=effect)
  )

fig.update_layout(
    title='Effect Plot',
    xaxis_title='Effects',
    yaxis_title='Features',
    xaxis_showgrid=False,
    yaxis_showgrid=False
)

fig.show()

(df["Proba"]>0.5).head(10)

SET_INDEX_DF = 16
local_data = dummy_encoded_df.iloc[SET_INDEX_DF,:]
local_effects = effects.iloc[SET_INDEX_DF,:]
local_data, local_effects

dummy_encoded_df.iloc[SET_INDEX_DF:SET_INDEX_DF+1,:]

layout = go.Layout(plot_bgcolor='#F0E9E6')
fig = go.Figure(layout=layout)

for each_col in effects.columns:
  fig.add_trace(go.Box(x=effects[each_col], marker_color='lightseagreen', name=each_col))

  fig.add_trace(
      go.Scatter(
          x=local_effects.to_numpy(),
          y=local_effects.index,
          hovertext=local_data.to_numpy(),
          hoverinfo="text",
          marker=dict(
              color="red"
          ),
          mode="lines+markers",
          marker_symbol="square-x",
          showlegend=False
      )
  )

  fig.update_layout(
      title=f'Local Effects of Data Point {SET_INDEX_DF}, Predicted Probability {df.iloc[SET_INDEX_DF,:]["Proba"]}',
      xaxis_title='Effects',
      yaxis_title='Features',
      xaxis_showgrid=False,
      yaxis_showgrid=False
  )

  fig.show()

low_proba_df = df[df['Proba'] < 0.5]
low_proba_df.sort_values("Proba", ascending=True).head(1)

VAGUINE_INDEX_VALUE = 7334
VAGUINE_INDEX = dummy_encoded_df.index[VAGUINE_INDEX_VALUE]
vaguine_local_data = dummy_encoded_df.loc[VAGUINE_INDEX]
vaguine_effects = effects.loc[VAGUINE_INDEX]
vaguine_local_data, vaguine_effects

layout = go.Layout(plot_bgcolor='#F0E9E6')
fig = go.Figure(layout=layout)

for each_effect in effects.columns:
  fig.add_trace(go.Box(x=effects[each_effect], marker_color='lightseagreen', name=each_effect))


fig.add_trace(go.Scatter(
    x=vaguine_effects.to_numpy(),
    y=vaguine_effects.index,
    hovertext=vaguine_local_data.to_numpy(),
    hoverinfo="text",
    marker=dict(color="red", size=10),
    mode="markers",
    marker_symbol="square-x",
    showlegend=False
  ))

fig.update_layout(
    title=f'Local Effects of Customer {VAGUINE_INDEX_VALUE} (Predicted Probability < 0.5)',
    xaxis_title="Feature Effect on Probability",
    yaxis_title="Features",
    xaxis_showgrid=False,
    yaxis_showgrid=False
)

fig.show()

fiorentini = low_proba_df.sort_values("Proba", ascending=False).head(1)
fiorentini

FIORENTINI_INDEX_VALUE = 5784
fiorentini = low_proba_df.sort_values("Proba", ascending=False).head(1)
FIORENTINI_INDEX = dummy_encoded_df.index[FIORENTINI_INDEX_VALUE]
fiorentini_local_data = dummy_encoded_df.loc[FIORENTINI_INDEX]
fiorentini_effects = effects.loc[FIORENTINI_INDEX]
fiorentini_local_data, fiorentini_effects

layout = go.Layout(plot_bgcolor="#F0E9E6")
fig = go.Figure(layout=layout)

for effect_col in effects:
  fig.add_trace(
      go.Box(
          x=effects[effect_col],
          marker_color="lightseagreen",
          name=effect_col
      )
  )

fig.add_trace(
    go.Scatter(
        x=fiorentini_effects.to_numpy(),
        y=fiorentini_effects.index,
        hovertext=fiorentini_local_data.to_numpy(),
        hoverinfo="text",
        marker=dict(color="red", size=10),
        mode="markers",
        marker_symbol="square-x",
        showlegend=False
  )
)

fig.update_layout(
    title=f'Local Effects of Customer {FIORENTINI_INDEX_VALUE} (Predicted Probability > 0.5)',
    xaxis_title="Feature Effect on Probability",
    yaxis_title="Features",
    xaxis_showgrid=False,
    yaxis_showgrid=False
)

fig.show()

random_index = random.choice(low_proba_df.index)
random_customer = low_proba_df.loc[random_index]

layout = go.Layout(plot_bgcolor="#F0E9E6")


for feature in non_categorical_columns:
  fig = go.Figure(layout=layout)

  fig.add_trace(
      go.Box(
          y=low_proba_df[feature],
          x=[feature]*len(low_proba_df),
          name=feature,
          boxmean=True,
          marker_color="lightseagreen"
      )
  )

  fig.add_trace(
      go.Scatter(
          x=[feature],
          y=[random_customer[feature]],
          mode="markers",
          marker=dict(color="red", size=10),
          text=[f"Customer {random_index[2]}"],
          textposition="top center",
          showlegend=False
      )
  )

  fig.update_layout(
    title=f"{feature} Distribution with Customer {random_index[2]}",
    yaxis_title=f"{feature} values",
    xaxis_title="",
    xaxis_showgrid=False,
    yaxis_showgrid=False
)
  fig.show()

